import math

# Funci√≥n para validar la condici√≥n
def validar_grupo(grupo):
    s1 = grupo[0] + grupo[1]
    s2 = grupo[2] + grupo[3]
    s3 = grupo[4] + grupo[5]
    return s1 == (2 * s2) - s3

# Resoluci√≥n iterativa del exponente
def calcular_exponente_iterativo(base, resultado):
    if base <= 0 or resultado <= 0:
        return None
    x = 0
    while base ** x < resultado:
        x += 1
    return x if base ** x == resultado else None

# Ordenamiento tipo bubble sort
def ordenar_lista(lista):
    n = len(lista)
    for i in range(n):
        for j in range(0, n - i - 1):
            if lista[j] > lista[j + 1]:
                lista[j], lista[j + 1] = lista[j + 1], lista[j]
    return lista

# B√∫squeda binaria
def busqueda_binaria(lista, objetivo):
    izquierda = 0
    derecha = len(lista) - 1
    while izquierda <= derecha:
        medio = (izquierda + derecha) // 2
        if lista[medio] == objetivo:
            return medio
        elif lista[medio] < objetivo:
            izquierda = medio + 1
        else:
            derecha = medio - 1
    return -1

# Funci√≥n principal
def main():
    resultados_validos = []
    casos_validos = 0
    casos_invalidos = 0

    while True:
        entrada = input("üî¢ Ingrese 6 n√∫meros separados por espacio (o escriba 'fin'): ")
        if entrada.lower() == 'fin':
            break

        elementos = entrada.strip().split()

        if len(elementos) != 6:
            print(" Error: Debes ingresar exactamente 6 n√∫meros.")
            continue

        try:
            grupo = [int(num) for num in elementos]
        except ValueError:
            print("  Error: Aseg√∫rate de ingresar solo n√∫meros enteros.")
            continue

        if validar_grupo(grupo):
            casos_validos += 1
            base = grupo[0]
            resultado = grupo[1]

            x = calcular_exponente_iterativo(base, resultado)
            if x is not None:
                print(f"  Condici√≥n v√°lida ‚Üí {base}^{x} = {resultado}")
                resultados_validos.append(x)
            else:
                print("  Condici√≥n v√°lida, pero no se encontr√≥ un exponente entero exacto.")
        else:
            casos_invalidos += 1
            print("  Condici√≥n inv√°lida")

    print("\n  RESULTADOS:")
    print(f"‚úî Casos v√°lidos: {casos_validos}")
    print(f"‚úò Casos inv√°lidos: {casos_invalidos}")

    if resultados_validos:
        resultados_ordenados = ordenar_lista(resultados_validos.copy())
        print(f" Resultados v√°lidos ordenados: {resultados_ordenados}")

        try:
            valor = int(input("üîç Ingrese un valor para buscar en los resultados: "))
            posicion = busqueda_binaria(resultados_ordenados, valor)
            if posicion != -1:
                print(f" Valor encontrado en la posici√≥n {posicion + 1} (√≠ndice {posicion})")
            else:
                print(" Valor no encontrado en la lista.")
        except ValueError:
            print("Entrada inv√°lida. Debes ingresar un n√∫mero entero.")
    else:
        print(" No hubo resultados v√°lidos para mostrar.")

if __name__ == "__main__":
    main()
